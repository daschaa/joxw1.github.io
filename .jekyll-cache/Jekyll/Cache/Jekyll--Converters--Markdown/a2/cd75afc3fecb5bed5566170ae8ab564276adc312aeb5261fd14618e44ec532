I"bb<h1 id="java-objekte-und-funktionen">Java Objekte und Funktionen</h1>

<p>In JavaScript gibt es zwei unterschiedliche Art von Datentypen: Grundelemente (<em>Primitives</em>) und Objekte (<em>Objects</em>). Zahlen (<em>Numbers</em>), Zeichenketten (<em>Strings</em>), <em>Booleans</em>, <em>Undefined</em> und <em>Null</em> sind Grundelemente. Alles andere sind Objekte (z.B. <em>Arrays</em> oder <em>Funktionen</em>).</p>

<h4 id="objektorientierte-programmierung">Objektorientierte Programmierung</h4>

<p>In der objektorientierten Programmierung stehen, wie der Name vermuten lässt, die Objekte im Fokus. Objekte können Daten über Methoden und Eigenschaften miteinander austauschen und verarbeiten. Um nicht jede Struktur zu einem individuellen Objekt implementieren zu müssen, gibt es in JavaScript die Möglichkeit “Objekttypen” zu deklarieren. Dies ist ein Art Blaupause für alle Strukturen die auf den Objekttyp passen. In anderen Programmiersprachen spricht man von <strong>Klassen</strong>, währen in JavaScript von <strong>Konstrukturen</strong> oder <strong>Prototypen</strong> gesprochen wird.</p>

<blockquote>
  <p><em>*Notiz:*</em> Ich würde von Prototypen sprechen, da der Begriff Konstruktor aufgrund der Vorbelegung aus Compiler-Sprachen vorbelastet ist.</p>
</blockquote>

<h5 id="vererbung">Vererbung</h5>

<p>Ein weiter wichtiger Aspekt ist die Vererbung von <strong>Prototypen</strong>. Bei der Vererbung werden durch eine Spezialisierung eines Objektes bestimmte Eigenschaften hinzugefügt, die die Basisklasse, von der das spezialisierte Objekt abstammt, nicht besitzt.</p>

<blockquote>
  <p><em>Notiz:</em> Wenn man zum Beispiel ein Objekt “Tier” hat, wäre eine Spezialisierung das Objekt “Hund” oder das Objekt “Fisch”. Ein “Hund” könnte Eigenschaften haben wie “Anzahl an Beinen”. Diese Eigenschaft würde sich der “Hund” nicht mit dem “Fisch” teilen, trotzdem stammen sie beide vom “Tier” ab.</p>
</blockquote>

<h5 id="prototypen">Prototypen</h5>

<p>Um eine Vererbung zu erreichen, müssen Eigenschaften als Prototypen-Eigenschaften deklariert sein. Alles was in den Prototypen-Eigenschaften definiert wird kann von den Objekt-Instanzen genutzt werden.</p>

<blockquote>
  <p><strong>Merke:</strong></p>

  <ol>
    <li>Jedes JavaScript Objekt hat eine Prototyp-Eigenschaft, was Vererbung möglich macht.</li>
    <li>In der Prototyp-Eigenschaft eines Objekts legt man Methoden und Eigenschaften fest, die andere Objekte erben sollen.</li>
    <li>Die Prototyp-Eigenschaft des Konstruktor ist nicht der Prototyp des Konstruktor selbst, sondern der Prototyp aller Instanzen, die durch ihn entstanden sind.</li>
    <li>Wenn eine Methode aufgerufen wird, wird zuerst im Objekt nach der Methode gesucht und wenn es nicht gefunden werden kann, wird im Prototyp des Objektes nach der Methode gesucht. Das kaskadiert nach “oben” bis die Methode gefunden wird. Man spricht von der <em>Prototype Chain</em></li>
  </ol>
</blockquote>

<h5 id="function-constructor">Function-Constructor</h5>

<p>Eine Art, ein Objekt zu erstellen, ist der <em>Function Constructor</em>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">yearOfBirth</span><span class="p">,</span> <span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">yearOfBirth</span> <span class="o">=</span> <span class="nx">yearOfBirth</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">job</span> <span class="o">=</span> <span class="nx">job</span><span class="p">;</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="dl">'</span><span class="s1">teacher</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Der oben gelistete Code funktioniert, da durch den “new” Operator, die “this” Eigenschaft nicht auf den <em>globalen Kontext</em>, sondern das <strong>neue leere Objekt</strong> gesetzt wird. Und da der Konstruktor keinen Wert zurückliefert, wird das instanziierte Objekt als Rückgabewert gesetzt. Man hat somit ein Objekt erstellt.</p>

<p>Um im nächsten Schritt eine Funktion zum Objekt hinzuzufügen, welches an alle Instanzen vererbt wird, kann man die Prototyp-Eigenschaft nutzen.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">calculateAge</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2020</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">yearOfBirth</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="objekte-erstellen">Objekte erstellen</h4>

<p>Ein anderer Weg, Objekte zu erstellen, die von einem Prototypen erben, ist die “Object.create” Methode.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">personProto</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">calculateAge</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2020</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">yearOfBirth</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">personProto</span><span class="p">);</span>
<span class="nx">john</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">john</span><span class="p">.</span><span class="nx">yearOfBirth</span> <span class="o">=</span> <span class="mi">1990</span><span class="p">;</span>
<span class="nx">john</span><span class="p">.</span><span class="nx">job</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">teacher</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">jane</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">personProto</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Jane</span><span class="dl">'</span><span class="p">},</span>
    <span class="na">yearOfBirth</span><span class="p">:</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="mi">1969</span><span class="p">},</span>
    <span class="na">job</span><span class="p">:</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">designer</span><span class="dl">'</span><span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="funktionen">Funktionen</h3>

<p>Da Funktionen letztendlich Objekte sind, ergibt sich folgendes:</p>

<ol>
  <li>Funktionen sind Instanzen vom Typ Objekt</li>
  <li>Funktionen verhalten sich wie Objekte</li>
  <li>Funktionen können in einer Variable gespeichert werden</li>
  <li>Funktionen können als Argument einer anderen Funktion übergeben werden</li>
  <li>Funktionen können von anderen Funktionen als Rückgabewert ausgegeben werden</li>
</ol>

<h5 id="funktionen-als-parameter">Funktionen als Parameter</h5>

<p>Um zu verdeutlichen, dass sich Funktionen auch wie Objekte verhalten, gibt es ein gutes Beispiel, in dem Callback-Funktionen übergeben werden.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">years</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1990</span><span class="p">,</span> <span class="mi">1965</span><span class="p">,</span> <span class="mi">1937</span><span class="p">,</span> <span class="mi">2005</span><span class="p">,</span> <span class="mi">1998</span><span class="p">];</span>

<span class="kd">function</span> <span class="nx">arrayCalc</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">arrRes</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">arrRes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fn</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]));</span> <span class="c1">// fn as a callback function</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">arrRes</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">calculateAge</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2020</span> <span class="o">-</span> <span class="nx">el</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">ages</span> <span class="o">=</span> <span class="nx">arrayCalc</span><span class="p">(</span><span class="nx">years</span><span class="p">,</span> <span class="nx">calculateAge</span><span class="p">);</span>
</code></pre></div></div>

<h5 id="funktionen-als-rückgabewert">Funktionen als Rückgabewert</h5>

<p>Ein anderes gutes Beispiel für Funktionen sind Funktionen als Rückgabewert.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">interviewQuestion</span><span class="p">(</span><span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">job</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">designer</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">, can you pleas explain what UX design is?</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">job</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">teacher</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">, what subject do you teach?</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello </span><span class="dl">'</span><span class="o">+</span><span class="nx">name</span><span class="o">+</span><span class="dl">'</span><span class="s1">, what do you do?</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">teacherQuestion</span> <span class="o">=</span> <span class="nx">interviewQuestion</span><span class="p">(</span><span class="dl">'</span><span class="s1">teacher</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">teacherQuestion</span><span class="p">(</span><span class="dl">'</span><span class="s1">Rob</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h5 id="immediately-invoked-function-expressions-iife">Immediately Invoked Function Expressions (IIFE)</h5>

<p>Um definierte Variablen zu “verstecken”, falls ein Modul von anderen Programmierern eingebunden werden sollte, gibt es die <em>Immediately Invoked Function Expressions</em>. Damit bleibt alles, was in der <strong>IIFE</strong> definiert wurde, im eigenen Execution Context.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Standard declaration</span>
<span class="kd">function</span> <span class="nx">game</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">game</span><span class="p">();</span>
<span class="c1">// IIFE</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre></div></div>

<h5 id="closures">Closures</h5>

<p>Eine innere Funktion hat immer Zugriff auf die Variablen und Parameter ihrer äußeren Funktion, auch nachdem die äußere Funktion zurückgekehrt ist.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">function</span> <span class="nx">retirement</span><span class="p">(</span><span class="nx">retirementAge</span><span class="p">)</span> <span class="p">{</span>
     <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1"> years left until retirement.</span><span class="dl">'</span><span class="p">;</span>
     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">yearOfBirth</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">2020</span> <span class="o">-</span> <span class="nx">yearOfBirth</span><span class="p">;</span>
         <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="nx">retirementAge</span> <span class="o">-</span> <span class="nx">age</span><span class="p">)</span> <span class="o">+</span> <span class="nx">a</span><span class="p">);</span>
     <span class="p">}</span>
 <span class="p">}</span>

 <span class="kd">var</span> <span class="nx">retirementUS</span> <span class="o">=</span> <span class="nx">retirement</span><span class="p">(</span><span class="mi">66</span><span class="p">);</span>
 <span class="nx">retirementUS</span><span class="p">(</span><span class="mi">1995</span><span class="p">);</span>
</code></pre></div></div>

<h5 id="call-apply--bind">Call, Apply &amp; Bind</h5>

<p>Die <em>Call</em>, <em>Apply</em> und <em>Bind</em> Methoden erlauben das manuelle Aufrufen und das Setzen der <em>this</em>-Variable. Um dies zu verdeutlichen, hier die Beispiele.</p>

<p><strong>Call</strong></p>

<p>Wie man im nachfolgenden Beispiel sieht, kann man mit der <em>Call</em>-Methode die <em>this</em>-Variable in der Methode auf ein gewünschtes Objekt “umbiegen”. Dies ist der erste Parameter in der <em>Call</em>-Methode. Dahinter kann man dann die Parameter für den Aufruf eingeben.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">john</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">26</span><span class="p">,</span>
  <span class="na">job</span><span class="p">:</span> <span class="dl">'</span><span class="s1">teacher</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">presentation</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">style</span><span class="p">,</span> <span class="nx">timeOfDay</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">style</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">formal</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Good </span><span class="p">${</span><span class="nx">timeOfDay</span><span class="p">}</span><span class="s2">, Ladies and gentlemen! I'm </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">, 
      I'm a </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">job</span><span class="p">}</span><span class="s2"> and I'm </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">}</span><span class="s2"> years old.`</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">style</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">friendly</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hey! What's up? I'm </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">, 
      I'm a </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">job</span><span class="p">}</span><span class="s2"> and I'm </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">}</span><span class="s2"> years old. 
      Have a nice </span><span class="p">${</span><span class="nx">timeOfDay</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">emily</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Emily</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
  <span class="na">job</span><span class="p">:</span> <span class="dl">'</span><span class="s1">designer</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">john</span><span class="p">.</span><span class="nx">presentation</span><span class="p">(</span><span class="dl">'</span><span class="s1">formal</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">evening</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">john</span><span class="p">.</span><span class="nx">presentation</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">emily</span><span class="p">,</span> <span class="dl">'</span><span class="s1">friendly</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">afternoon</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// Sets the this variable in the presentation function to emily</span>
</code></pre></div></div>

<p><strong>Apply</strong></p>

<p>Diese Methode bietet die Möglichkeit Parameter als Array an die ursprüngliche Methode zu übergeben.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">john</span><span class="p">.</span><span class="nx">presentation</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">emily</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">formal</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">morning</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p><strong>Bind</strong></p>

<p>Die <em>Bind</em> Methode ist in der Lage, eine Kopie einer Methode zu erstellen und sie in einer Variable zu speichern. Der Vorteil ist, dass man dabei Parameter festlegen kann und beim Aufruf der kopierten Methode diesen Parameter nicht erneut eingeben muss.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">johnFriendly</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">presentation</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">john</span><span class="p">,</span> <span class="dl">'</span><span class="s1">friendly</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">johnFriendly</span><span class="p">(</span><span class="dl">'</span><span class="s1">morning</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>
:ET
I"3<p>Im zweiten Teil der JavaScript-Grundlagen Notizen, basierend auf dem Kurs von <a href="https://www.udemy.com/course/the-complete-javascript-course/">Jonas</a> geht es hauptsächlich um Verzweigungen und Operatorlogik. Zunächst jedoch noch ein Nachtrag zu den Basisoperatoren.</p>

<h4 id="operatorprioritäten">Operatorprioritäten</h4>

<p>Die Operator-Priorität bestimmt, wie die Operatoren untereinander geparst werden. Operatoren mit höherer Priorität werden zu Operanden von Operatoren mit niedrigerer Priorität.</p>

<p>Die Operatorprioritäten sind in einer <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">Tabelle</a> aufgeführt. In dieser Tabelle wird zudem deutlich, dass nicht nur die Priorität eine Rolle spielt, sondern auch die “Assoziativität”. Diese gibt an, ob Operatoren von “links-nach-rechts” oder “rechts-nach-links” ausgeführt werden.</p>

<h5 id="beispiel">Beispiel</h5>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span>
<span class="nx">x</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="c1">// x ist nicht 'undefined', da von rechts nach links gelesen wird</span>
</code></pre></div></div>

<h3 id="verzweigungen">Verzweigungen</h3>

<p>Verzweigungen werden genutzt um den Programmfluss zu ändern. Man kann z.B. je nach Wert einer Variable die nächste Unterfunktion aufrufen oder Variablen neue Werte zuweisen.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span>
<span class="kd">var</span> <span class="nx">civilStatus</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">single</span><span class="dl">'</span>

<span class="k">if</span><span class="p">(</span><span class="nx">civilstatus</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">married</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is married`</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is single`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Innerhalb der Bedingungen kann eine beliebig komplexe boolsche Logik stecken. Man muss dabei jedoch auch immer die Operatorpriorität beachten.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>

<span class="k">if</span><span class="p">(</span><span class="nx">age</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is a boy.`</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">13</span> <span class="o">&amp;&amp;</span> <span class="nx">age</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is a teenager.`</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is a man.`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="ternäre-operatoren">Ternäre Operatoren</h5>

<p>Der ternäre Operator erlaubt das Schreiben eines If-Else-Statement in einer Zeile.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">drink</span> <span class="o">=</span> <span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">18</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">beer</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">juice</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> drinks </span><span class="p">${</span><span class="nx">drink</span><span class="p">}</span><span class="s2">.`</span><span class="p">)</span>
</code></pre></div></div>

<h5 id="switch-statement">Switch-Statement</h5>

<p>Eine Alternative zum If-Else-Statement ist das Switch-Statement. Es wird vorallem bei einem großen Entscheidungsbaum mit simplen Bedingungen (Conditionals) verwendet.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">job</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">teacher</span><span class="dl">'</span><span class="p">;</span>
<span class="k">switch</span><span class="p">(</span><span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">teacher</span><span class="dl">'</span><span class="p">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is a teacher.`</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">driver</span><span class="dl">'</span><span class="p">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is a driver.`</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is something else.`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="truthy--falsy">Truthy &amp; Falsy</h5>

<p>Truthy- und Falsy-Werte, sind bestimmte Werte die in einer Verzweigung entweder wahr oder falsch sind. So ist “undefined” z.B. ein Falsy-Wert, da in einer If-Bedingung dieser Wert als “false” interpretiert werden würde.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// falsy: undefined, null, 0, '', NaN</span>
<span class="c1">// truthy: NOT falsy :-)</span>

<span class="kd">var</span> <span class="nx">height</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">height</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Variable defined.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Variable is not defined.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Worauf man jedoch achten muss ist, dass auch die 0 ein Falsy-Wert ist. Würde man im o.g. Beispiel der Variable “height” eine 0 zuweisen, wäre der Wert definiert. Trotzdem würde der Else-Block ausgeführt werden, da 0 nicht “wahr” ist. Dadurch ergibt sich in JavaScript ein Muster, welches oft angewendet wird. Möchte man den Wert einer Variable überprüfen, sollte man erst überprüfen, ob sie definiert ist.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="nx">height</span> <span class="o">||</span> <span class="nx">height</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Variable defined.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Variable is not defined.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="gleichungsoperatoren">Gleichungsoperatoren</h5>

<p>In JavaScript gibt es zwei unterschiedliche Operatoren, um eine Gleichung zu prüfen.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">height</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">23</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">The == operator does type coercion.</span><span class="dl">'</span><span class="p">)</span>
    <span class="c1">// Wird ausgeben, da der Typenzwang angewendet wird.</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">height</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">23</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Wird nicht ausgeführt, da auch der Typ gleich sein muss. (Best Practice)</span>
<span class="p">}</span>
</code></pre></div></div>
:ET
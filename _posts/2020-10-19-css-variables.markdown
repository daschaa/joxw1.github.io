---
layout: post
title: CSS Variablen
date: 2020-10-19 15:07:12 +0300
description: Notizen √ºber CSS Variablen
img: css.jpg
fig-caption: CSS Variablen
tags: [CSS, Grundlagen, Variablen, var]
---
Ich habe vor kurzem einen interessanten Artikel √ºber CSS Variablen gelesen und w√ºrde die Informationen aus diesem Artikel gerne hier festhalten. F√ºr das Original bitte [hier](https://ishadeed.com/article/css-vars-101/) klicken.

CSS Variablen dienen der Komplexit√§tsreduktion und des Herunterschraubens von Redundanz. Sie erm√∂glichen eine Wiederverwertung von bestimmten Werten, die h√§ufiger in einem Stylesheet auftauchen. Ahmad hat in seinem Artikel viele interessante Beispiele, die ich hier √ºbernehme.

Als Beispiel:

````css
.section {
  border: 2px solid #235ad1;
}

.section-title {
  color: #235ad1;
}

.section-title::before {
  content: "";
  display: inline-block;
  width: 20px;
  height: 20px;
  background-color: #235ad1;
}
````

Man sieht, dass die Farbe `#235ad1` insgesamt dreimal auftaucht. Das k√∂nnte man vereinfachen, in dem man eine Variable nutzt. Sie wird in einem Block mit einem Doppelstrich deklariert, wie man im nachfolgenden Beispiel sieht.

```css
:root {
  --color-primary: #235ad1;
}

.section {
  border: 2px solid var(--color-primary);
}

.section-title {
  color: var(--color-primary);
}

.section-title::before {
  /* Other styles */
  background-color: var(--color-primary);
}
```

So sieht es schon deutlich sch√∂ner aus und man hat das Prinzip *Don't Repeat Yourself* beachtet.

### Benennung

Wichtig ist, wie bei anderen Programmiersprachen, die richtige Benennung der Variablen. Es sind alphanumerische Zeichen, Unterstriche und Bindestreiche erlaubt. Leerzeichen und Sonderzeichen d√ºrfen zuhause bleiben üö´.

```css
/* Valid names */
:root {
	--primary-color: #222;
	--_primary-color: #222;
	--12-primary-color: #222;
	--primay-color-12: #222;
}

/* Invalid names */
:root {
	--primary color: #222; /* Spacings are not allowed */
	--primary$%#%$#
}
```

### Geltungsbereiche

Bei CSS Variablen gibt es auch unterschiedliche Geltungsbereiche. Eine Variable kann in einem Deklarationsblock √ºberschrieben werden. Im nachfolgenden Beispiel sieht man, dass die `--primary-color` Variable in der `.section-title` Klasse √ºberschrieben wird. Der Wert gilt dann nur in dem Block, in dem es neu definiert wurde.

```css
:root {
  --primary-color: #235ad1;
}

.section-title {
  --primary-color: d12374;
  color: var(--primary-color);
}
```

### Fallback

Bisher wurde die `var`-Funktion immer nur mit einem Parameter beachtet. Man kann jedoch noch einen zweiten, sehr n√ºtzlichen Parameter √ºbergeben - den **Fallback**-Wert. Dieser Wert wird genutzt, wenn der Wert der Variable nicht genutzt bzw. ermittelt werden kann. Man kann dies auch mit einem erneuten `var`-Aufruf verketten.

```css
/* Normal fallback value */
.section-title {
  color: var(--primary-color, #222);
}
/* Chained call */
.section-title {
  color: var(--primary-color, var(--black, #222));
}
```

### Use-Cases

Ahmad hat in seinem Artikel bereits coole Use-Cases mitgeliefert. Ich habe diese  Sachen in Codepen's nachimplementiert um ein Gef√ºhl daf√ºr zu bekommen, wie es zu nutzen ist.

#### Gr√∂√üe von Elementen

Das erste Beispiel ist, die Gr√∂√üe von Elementen dynamisch anhand ihrer gesetzten Klasse zu ver√§ndern. Man nutzt dabei gezielt den Geltungsbereich (**Scope**) der Variablen. 

Im nachfolgenden Beispiel sieht man, dass in der Hauptklasse `.button` ein Padding definiert ist, welches von der Variable `--unit` abh√§ngt. Initial ist die Einheit `1rem` gro√ü. M√∂chte man nun einen kleineren/gr√∂√üeren Typ des Buttons erstellen, reicht es, die `--unit`-Variable zu √ºberschreiben.

<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="css,result" data-user="joxwi" data-slug-hash="WNxxJEz" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="CSS Variables - Size of elements">
  <span>See the Pen <a href="https://codepen.io/joxwi/pen/WNxxJEz">
  CSS Variables - Size of elements</a> by Joshua Wiegmann (<a href="https://codepen.io/joxwi">@joxwi</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

#### Farbe von Elementen

Ein anderes sch√∂nes Beispiel ist die dynamische Anpassung von Farben √ºber CSS Variablen.

Im Beispiel ist die Hintergrundfarbe √ºber die `hsl`-Funktion gesetzt. Der Wert der Funktion besteht aus Farbton, S√§ttigung und Helligkeit. Sind diese Werte, wie im Beispiel zu sehen, √ºber Variablen gesetzt, kann man einzelne Werte dynamisch anpassen. Hier wird die Helligkeit heruntergesetzt, sobald man √ºber den Button hovert. Das ist ziemlich cool, da man Farbton und S√§ttigung somit beh√§lt und einen sch√∂nen Effekt erzielt.

<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="css,result" data-user="joxwi" data-slug-hash="YzWWvea" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="CSS Variables - Color of element">
  <span>See the Pen <a href="https://codepen.io/joxwi/pen/YzWWvea">
  CSS Variables - Color of element</a> by Joshua Wiegmann (<a href="https://codepen.io/joxwi">@joxwi</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script> 

#### Proportionale Gr√∂√üen√§nderung

Dieses Beispiel ist auch sehr cool. Man kann sich die Wiederverwendung von Variablen zu nutze machen, um Breite und H√∂he eines Elements immer proportional zueinander zu halten. 

Im nachfolgenden Pen habe ich versucht, dies dynamisch zu bauen.

<p class="codepen" data-height="441" data-theme-id="dark" data-default-tab="css,result" data-user="joxwi" data-slug-hash="BazzPdo" style="height: 441px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="CSS Variables - Proportional Resize">
  <span>See the Pen <a href="https://codepen.io/joxwi/pen/BazzPdo">
  CSS Variables - Proportional Resize</a> by Joshua Wiegmann (<a href="https://codepen.io/joxwi">@joxwi</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

#### Light-Mode und Dark-Mode

Ein anderer interessanter Use-Case ist das Umschalten von Light-Mode und Dark-Mode. Man muss dazu lediglich ein Farbschema f√ºr die Variablen festsetzen und diese Variablen durchg√§ngig benutzen und kann damit leicht zwischen den beiden Modi durchtogglen. Ich habe mal versucht, ein Minimalbeispiel in einen Pen zu packen.

<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="css,result" data-user="joxwi" data-slug-hash="bGeejxB" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="CSS Variables: Switch mode">
  <span>See the Pen <a href="https://codepen.io/joxwi/pen/bGeejxB">
  CSS Variables: Switch mode</a> by Joshua Wiegmann (<a href="https://codepen.io/joxwi">@joxwi</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

#### Animationen

Ein weiteres Beispiel f√ºr das Nutzen von Variablen ist f√ºr Animationen. Man kann die Variablen in den Keyframes nutzen und die Animation so, je nach aktivierter Klasse, ver√§ndern. Damit lassen sich interessante Effekte erzielen. Ein kleines Beispiel ist nachfolgend gezeigt.

<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="css,result" data-user="joxwi" data-slug-hash="gOMMZqX" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="CSS Variables - Animations">
  <span>See the Pen <a href="https://codepen.io/joxwi/pen/gOMMZqX">
  CSS Variables - Animations</a> by Joshua Wiegmann (<a href="https://codepen.io/joxwi">@joxwi</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

### Zusammenfassung

Das waren meine Notizen zum Post von Ahmad. Dabei habe ich l√§ngst nicht alles aufgeschrieben, was an Inhalt im Original-Post drin war - daher lohnt sich der [Blick in den Post nochmal sehr](https://ishadeed.com/article/css-vars-101/), um alles detailliert nachzulesen.

F√ºr die Codepens in diesen Artikel [habe ich eine Collection angelegt](https://codepen.io/collection/DEzrEJ).